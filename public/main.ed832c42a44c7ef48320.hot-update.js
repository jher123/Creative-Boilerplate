/*! For license information please see main.ed832c42a44c7ef48320.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/index.js":(e,t,n)=>{n.r(t);var a=n("./node_modules/lodash/each.js"),s=n.n(a),o=n("./app/pages/About/index.js"),i=n("./app/pages/Collections/index.js"),c=n("./app/pages/Detail/index.js"),l=n("./app/pages/Home/index.js");new class{constructor(){this.createContent(),this.createPages(),this.addLinkListeners()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template"),console.log(this.template)}createPages(){this.pages={home:new l.default,collections:new i.default,about:new o.default,detail:new c.default},this.page=this.pages[this.template],this.page.create()}async onChange(e){const t=await window.fetch(e);if(console.log(t),200===t.status){const e=await t.text(),n=document.createElement("div");n.innerHTML=e;const a=n.querySelector(".content");this.content.setAttribute("data-template",a.getAttribute("data-attribute")),this.content.innerHTML=a.innerHTML,console.log(e)}else console.log("error")}addLinkListeners(){const e=document.querySelectorAll("a");s()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:n}=e;this.onChange(n)}}))}}}},(function(e){e.h=()=>"c550ae097e533be0b06c"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5lZDgzMmM0MmE0NGM3ZWY0ODMyMC5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7bVJBcUZBLElBL0VBLE1BQ0VBLGNBR0VDLEtBQUtDLGdCQUNMRCxLQUFLRSxjQUNMRixLQUFLRyxtQkFHUEYsZ0JBQ0VELEtBQUtJLFFBQVVDLFNBQVNDLGNBQWMsWUFDdENOLEtBQUtPLFNBQVdQLEtBQUtJLFFBQVFJLGFBQWEsaUJBQzFDQyxRQUFRQyxJQUFJVixLQUFLTyxVQU1uQkwsY0FJRUYsS0FBS1csTUFBUSxDQUNYQyxLQUFNLElBQUlDLEVBQUFBLFFBQ1ZDLFlBQWEsSUFBSUMsRUFBQUEsUUFDakJDLE1BQU8sSUFBSUMsRUFBQUEsUUFDWEMsT0FBUSxJQUFJQyxFQUFBQSxTQU1kbkIsS0FBS29CLEtBQU9wQixLQUFLVyxNQUFNWCxLQUFLTyxVQUM1QlAsS0FBS29CLEtBQUtDLFNBS0UsZUFBRUMsR0FDZCxNQUFNQyxRQUFnQkMsT0FBT0MsTUFBTUgsR0FFbkMsR0FEQWIsUUFBUUMsSUFBSWEsR0FDVyxNQUFuQkEsRUFBUUcsT0FBZ0IsQ0FDMUIsTUFBTUMsUUFBYUosRUFBUUssT0FFckJDLEVBQU14QixTQUFTeUIsY0FBYyxPQUNuQ0QsRUFBSUUsVUFBWUosRUFFaEIsTUFBTUssRUFBYUgsRUFBSXZCLGNBQWMsWUFFckNOLEtBQUtJLFFBQVE2QixhQUFhLGdCQUFpQkQsRUFBV3hCLGFBQWEsbUJBQ25FUixLQUFLSSxRQUFRMkIsVUFBWUMsRUFBV0QsVUFDcEN0QixRQUFRQyxJQUFJaUIsUUFFWmxCLFFBQVFDLElBQUksU0FJaEJQLG1CQUVFLE1BQU0rQixFQUFRN0IsU0FBUzhCLGlCQUFpQixLQUV4Q0MsR0FBQUEsQ0FBS0YsR0FBT0csSUFDVkEsRUFBS0MsUUFBVUMsSUFFYkEsRUFBTUMsaUJBS04sTUFBTSxLQUFFQyxHQUFTSixFQUVqQnJDLEtBQUswQyxTQUFTRCx3QkM3RXRCRSxFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXG5pbXBvcnQgQWJvdXQgZnJvbSAncGFnZXMvQWJvdXQnXG5pbXBvcnQgQ29sbGVjdGlvbnMgZnJvbSAncGFnZXMvQ29sbGVjdGlvbnMnXG5pbXBvcnQgRGV0YWlsIGZyb20gJ3BhZ2VzL0RldGFpbCdcbmltcG9ydCBIb21lIGZyb20gJ3BhZ2VzL0hvbWUnXG5cbmNsYXNzIEFwcCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvLyAgIHdlIHB1dCB0aGlzIGxvZyBhdCB0aGUgc3RhcnQgdG8gbWFrZSBzdXJlIGl0J3MgYWN0dWFsbHkgd29ya2luZ1xuICAgIC8vIGNvbnNvbGUubG9nKCdBUFAnKVxuICAgIHRoaXMuY3JlYXRlQ29udGVudCgpXG4gICAgdGhpcy5jcmVhdGVQYWdlcygpXG4gICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKClcbiAgfVxuXG4gIGNyZWF0ZUNvbnRlbnQgKCkge1xuICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JylcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpXG4gICAgY29uc29sZS5sb2codGhpcy50ZW1wbGF0ZSlcbiAgICAvLyB0aGlzIHJldHVybnMgYSBzdHJpbmcsIHRoZSBuYW1lIG9mIHRoZSBwYWdlXG4gIH1cblxuICAvLyBmaXJzdGx5IHdlIG5lZWQgdG8gY3JlYXRlIG5ldyBwYWdlc1xuICAvLyB0aGlzIGNhbiBiZSBhIG1hcCBvZiBhbGwgcGFnZXMgd2UnZXIgZ29pbmcgdG8gaW5pdGFsaXNlXG4gIGNyZWF0ZVBhZ2VzICgpIHtcbiAgICAvLyB0aGVyZSdzIDIgd2F5cyB0byBkbyBpdCAtIHdlIGNhbiBlaXRoZXIgY3JlYXRlIHRob3NlIGNsYXNzZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3JcbiAgICAvLyB3ZSBjYW4gZWl0aGVyIGluaXRsYWlzZSBhbGwgb3VyIGNsYXNzZXMgaGVyZSBvciBhbnRoZXIgbWV0aG9kLCB3ZSBjYW4gZGVzdHJveSB0aGVuIG9yIG5vdCwgdXN1c2FsbHkgaGUgZG9lc24ndCBkZXN0cm95IHRoZW4sIGhlIGp1c3QgY3JlYXRlcyBhZGQgYW5kIHJlbW92ZSBsaXN0ZW5lcnNcbiAgICAvLyBiZWNhdXNlIGl0IGNhbiBjb25zdW1pbmcgZm9yIHRoZSBicm93c2VyIGtlZXBpbmcgdHJhY2sgb2YgZGVzdHJveWluZyBhbmQgY3JlYXRpbmcgY2xhc3Nlc1xuICAgIHRoaXMucGFnZXMgPSB7XG4gICAgICBob21lOiBuZXcgSG9tZSgpLFxuICAgICAgY29sbGVjdGlvbnM6IG5ldyBDb2xsZWN0aW9ucygpLFxuICAgICAgYWJvdXQ6IG5ldyBBYm91dCgpLFxuICAgICAgZGV0YWlsOiBuZXcgRGV0YWlsKClcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5wYWdlcylcblxuICAgIC8vIG5vdyB3ZSBnZXQgdGhpcyBwYWdlIChzbyAnaG9tZScgb3IgJ2Fib3V0JyBldGMuKSAtIHRoaXMgb25seSBpbml0bGFpc2VzIHRoZSBjbGFzc2VzIHRhaHQgd2UncmUgdXNpbmdcbiAgICAvLyB0aGlzIGFsbG93cyB1cyB0byBjcmVhdGUgb25lIHBhZ2UgYXQgb25jZVxuICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV1cbiAgICB0aGlzLnBhZ2UuY3JlYXRlKClcbiAgICAvLyB0aGlzLnBhZ2Uuc2hvdygpXG4gICAgLy8gdGhpcy5wYWdlLmhpZGUoKVxuICB9XG5cbiAgYXN5bmMgb25DaGFuZ2UgKHVybCkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKVxuICAgIGNvbnNvbGUubG9nKHJlcXVlc3QpXG4gICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZXF1ZXN0LnRleHQoKVxuICAgICAgLy8gd2UncmUgY3JlYXRpbmcgYSBmYWtlIGRpdiBoZXJlIHRvIGFwcGVuZCB0aGUgaHRtbCBvZiB0aGUgcmVxdWVzdGVkIHBhZ2VcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgLy8gb3ZlcnJyaWRpbmcgdGhlIGh0bWwgd2l0aCB0aGUgbmV3IHBhZ2UgaHRtbFxuICAgICAgY29uc3QgZGl2Q29udGVudCA9IGRpdi5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpXG4gICAgICAvLyBsZXQncyBhbHNvIHVwZGF0ZSB0aGUgc2x1ZyB0byB0aGUgbmV3IHBhZ2UncyBvbmVcbiAgICAgIHRoaXMuY29udGVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnLCBkaXZDb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRyaWJ1dGUnKSlcbiAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBkaXZDb250ZW50LmlubmVySFRNTFxuICAgICAgY29uc29sZS5sb2coaHRtbClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yJylcbiAgICB9XG4gIH1cblxuICBhZGRMaW5rTGlzdGVuZXJzICgpIHtcbiAgICAvLyB0aGlzIG1ldGhpZCB3aWxsIGdvIHRocm91Z2ggYWxsIGxpbmtzIG9uIHRoZSB3ZWJzaXRlICh1c2luZyBsb2Rhc2gpXG4gICAgY29uc3QgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhJylcblxuICAgIGVhY2gobGlua3MsIGxpbmsgPT4ge1xuICAgICAgbGluay5vbmNsaWNrID0gZXZlbnQgPT4ge1xuICAgICAgICAvLyB3ZSBhdm9pZCByZWRpcmVjdGluZyBoZXJlXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICAvLyBpbnN0ZWFkIHdlJ2xsIHVzZSBmZXRjaCBBUEkgdG8gcmVxdWVzdCB0aGUgcGFnZSB3aXRob3V0IGhhdmluZyB0byByZWZyZXNoIHRoZSBwYWdlIGZvciB0aGUgdXNlclxuICAgICAgICAvLyB3ZSBhcmUgZmV0Y2hpbmcgdGhlIHBhZ2Ugd2l0aG91dCBsZWF2aW5nIHRoZSBwcmV2aW91cyBvblxuICAgICAgICAvLyB0aGlzIGlzIHRoZSB3YXkgdG8gaW1wZWxtZW50IHdoYXQgUmVhY3QgaXMgZG9pbmcgd2l0aCBBSkFYXG4gICAgICAgIGNvbnN0IHsgaHJlZiB9ID0gbGlua1xuXG4gICAgICAgIHRoaXMub25DaGFuZ2UoaHJlZilcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4vLyBPYmplY3Qgb3JpZW50ZWQgb3JpZW50YXRpb24gdXNpbmcgSlNTLVxuLy8gaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIGNyZWF0ZSBjbGFzcyBpbiB0aGVzZSBkaWZmIGZpbGVzIGFuZCBjb3B5aW5nIHRoZSBzYW1lIG1ldGhpZHMgYW5kIGZ1bmN0aW9ucyBvdmVyIGFuZCBvdmVyIGFnYWluIGZvciBlYWNoIG9mIHRoaXNlIGRpZmYgcGFnZXNcbi8vIGl0J3MgY3JlYXRpbmcgYSBmaWxlIHdoZXJlIHdlIGNhbiBleHRlbmQgYW5kIGV4dGVuZCBkaWZmIG1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBpbnRvIG90aGVyIGNsYXNzZXNcbm5ldyBBcHAoKVxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiYzU1MGFlMDk3ZTUzM2JlMGIwNmNcIikiXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJ0aGlzIiwiY3JlYXRlQ29udGVudCIsImNyZWF0ZVBhZ2VzIiwiYWRkTGlua0xpc3RlbmVycyIsImNvbnRlbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZW1wbGF0ZSIsImdldEF0dHJpYnV0ZSIsImNvbnNvbGUiLCJsb2ciLCJwYWdlcyIsImhvbWUiLCJIb21lIiwiY29sbGVjdGlvbnMiLCJDb2xsZWN0aW9ucyIsImFib3V0IiwiQWJvdXQiLCJkZXRhaWwiLCJEZXRhaWwiLCJwYWdlIiwiY3JlYXRlIiwidXJsIiwicmVxdWVzdCIsIndpbmRvdyIsImZldGNoIiwic3RhdHVzIiwiaHRtbCIsInRleHQiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiZGl2Q29udGVudCIsInNldEF0dHJpYnV0ZSIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImVhY2giLCJsaW5rIiwib25jbGljayIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJocmVmIiwib25DaGFuZ2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=